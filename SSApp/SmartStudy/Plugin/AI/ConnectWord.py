import requests, json
from ...Action import sendMessage, Menus, token
from ...Sundry import Json
from ....models import Q, Eng_Dictionary, VieWord

class ConnectWord_Game:
    def __init__(self) -> None:
       self.vie_connect = Json().load("SSApp\SmartStudy/config.json")["online_noitu"]["Vie"]
       self.eng_connect = Json().load("SSApp\SmartStudy/config.json")["online_noitu"]["Eng"]

    class Next:
        def __init__(self) -> None:
            self.accounts = Json().load("SSApp\SmartStudy\Json/accounts.json")
            self.conditions = Q(word__icontains=' ') | Q(word__icontains='-')

        def EngWord(self, user_id, word):
            def get_word(char, start_char=True):
                if start_char:
                    return Eng_Dictionary.objects.filter(
                        Q(word__startswith=char) & ~self.conditions 
                    ).order_by('?').first()
                
                return Eng_Dictionary.objects.filter(
                        Q(word__endswith=char) & ~self.conditions 
                    ).order_by('?').first()

            user_word = word.lower()
            bot_word = self.accounts[user_id].lower()

            if word == '':
                res_word = get_word(char="") 
                res_word = res_word and res_word.word
                
                self.accounts[user_id] = res_word or "noitu_empty"

            # x√©t ng∆∞·ªùi d√πng c√≥ nh·∫≠p ƒë√∫ng hay kh√¥ng
            elif (bot_word == "noitu_empty" or 
                ((len(user_word.split()) == 1) and 
                (bot_word[-1] == user_word[0]))
                ):
                res_word = get_word(char=user_word[-1]) 
                res_word = res_word and res_word.word
                self.accounts[user_id] = res_word or "noitu_empty"
            else: 
                return "b·∫°n ƒë√£ thua"
            
            Json().save(
                "SSApp\SmartStudy\Json/accounts.json", self.accounts)
            return res_word or None
        
        def VieWord(self, user_id, word):
            def Vie(word, start_char=True):
                if start_char:
                    return VieWord.objects.filter(
                        Q(word__startswith=word) 
                    ).order_by('?').first()
                
                return VieWord.objects.filter(
                        Q(word__endswith=word) 
                    ).order_by('?').first()

            user_word = word.lower().split()
            bot_word = self.accounts[user_id].lower().split()

            if word == '':
                res_word = Vie(word="") 
                res_word = res_word and res_word.word
                self.accounts[user_id] = res_word or "noitu_empty"

            # x√©t ng∆∞·ªùi d√πng c√≥ nh·∫≠p ƒë√∫ng hay kh√¥ng
            elif (bot_word[0] == "noitu_empty" or (
            (len(user_word) == 2) and (bot_word[1] == user_word[0]))
            ):
                res_word = Vie(word=user_word[1]) 
                res_word = res_word and res_word.word
                self.accounts[user_id] = res_word or "noitu_empty"
            else: 
                return "b·∫°n ƒë√£ thua"
            
            Json().save(
                "SSApp\SmartStudy/Json/accounts.json", self.accounts)
            return res_word or None

    #----------------------play---------------------------------
    def nextWord(self, sender_id: str, word: str|None):
        if sender_id in self.vie_connect:
            if not word:
                word = ''
            nextWord = self.Next().VieWord(sender_id, word=word)
            
        elif sender_id in self.eng_connect:
            if not word:
                word = ''
            nextWord = self.Next().EngWord(sender_id, word=word)

        else: 
            print("Errol -> sender can not connection.")

        return nextWord or ("Bot h·∫øt t·ª´...")
    
    
    def game_rules(self, sender_id: str):
        mode_Vie = f'''
    * N·ªëi t·ª´ ti·∫øng Vi·ªát:
    - N·∫øu b·∫°n ch·ªçn Bot ƒëi tr∆∞·ªõc th√¨ Bot s·∫Ω ƒë∆∞a ra cho b·∫°n 1 c·ª•m t·ª´ (c·ª•m n√†y ch·ªâ c√≥ 2 t·ª´). B·∫°n s·∫Ω ph·∫£i t√¨m nh·ªØng c·ª•m t·ª´ c≈©ng ch·ªâ ƒë∆∞·ª£c ch·∫≠p nh·∫≠n 2 t·ª´. Trong c·ª•m t·ª´ ƒë√≥, t·ª´ ƒë·∫ßu ti√™n ph·∫£i tr√πng v·ªõi t·ª´ cu·ªëi c·ªßa Bot v·ª´a ƒë∆∞a ra v√† ng∆∞·ª£c l·∫°i.

        '''
        mode_Vie_1 = f'''
    * V√≠ d·ª• ƒë√∫ng lu·∫≠t c·ªßa tr√≤ ch∆°i:
        "xin ch√†o" -> "ch√†o b·∫°n" -> "b·∫°n th√¢n" -> ...
    * V√≠ d·ª• kh√¥ng ƒë√∫ng lu·∫≠t c·ªßa tr√≤ ch∆°i:
        +> "con g√†" -> "con heo" 
        +> "xin ch√†o" -> "ch√†o m·ªçi ng∆∞·ªùi" -> ...
        +> "thua"
    => S·∫Ω b·ªã thua
        '''
        
        mode_Eng = f'''
    * N·ªëi t·ª´ ti·∫øng And: 
    - Ch·∫ø ƒë·ªô n√†y kh√°c v·ªõi n·ªëi t·ª´ ti·∫øng Vi·ªát. N·∫øu b·∫°n ch·ªçn ch·ªçn b·∫°n ƒëi tr∆∞·ªõc th√¨ b·∫°n h√£y ƒë∆∞a ra 1 t·ª´ ti·∫øng anh b·∫•t k√¨ KH√îNG D·∫§U C√ÅCH. Nhi·ªám v·ª• c·ªßa Bot s·∫Ω t√¨m ra c√°c t·ª´ c√≥ ch·ªØ c√°i ƒë·∫ßu c√πng v·ªõi ch·ªØ c√°i cu·ªëi c·ªßa b·∫°n ƒë∆∞a ra v√† ng∆∞·ª£c l·∫°i b·∫°n c≈©ng ti·∫øp di·ªÖn nh∆∞ v·∫≠y.
    * *V√≠ D·ª•:* 
        "character" -> "relax" -> "xanthous" -> ...
        '''

        mode_Eng_1 = f'''
    * V√≠ d·ª• ƒë√∫ng lu·∫≠t c·ªßa tr√≤ ch∆°i:
        "character" -> "relax" -> "xanthous" -> ...
    * V√≠ d·ª• kh√¥ng ƒë√∫ng lu·∫≠t c·ªßa tr√≤ ch∆°i:
        +> "play" -> "love"
        +> "bus" -> "smart study"
    => S·∫Ω b·ªã thua
        '''
        
        if sender_id in self.vie_connect:
            sendMessage(sender_id, mode_Vie)
            sendMessage(sender_id, mode_Vie_1)
        if sender_id in self.eng_connect:
            sendMessage(sender_id, mode_Eng)
            sendMessage(sender_id, mode_Eng_1)
        sendMessage(sender_id, "Ch√∫c b·∫°n ch∆°i game vui v·∫ª üòä")

def word_translation_button(sender_id: str, text: str):
    if not text: #n·∫øu l√† r·ªóng
        return
    params = {"access_token": token}
    headers = {"Content-Type": "application/json"}
    data = json.dumps({
    "recipient": {"id": sender_id},
    "messaging_type": "RESPONSE",
    "message":{
        "text": text, "quick_replies":[
            {"content_type":"text", "title": "D·ªãch nghƒ©a", 
                "payload": "mean word"
            },
        ]}})
    requests.post("https://graph.facebook.com/v17.0/me/messages", 
                  params=params, headers=headers, data=data)
    return "answered"
  
def mode_connect_words(sender_id: str):
    params = {"access_token": token}
    headers = {"Content-Type": "application/json"}
    data = json.dumps({
        "recipient":{"id": sender_id},
        "message":{
            "attachment":{"type":"template",
            "payload":{
                "template_type":"button", "text": "Ch·∫ø ƒë·ªô ng√¥n ng·ªØ",
                "buttons":[
                {"type":"postback", "title": "Ti·∫øng Anh",
                    "payload":"Eng matching"},
                {"type":"postback", "title": "Ti·∫øng Vi·ªát",
                    "payload": "Vie matching"}
                ]}}}})
    requests.post("https://graph.facebook.com/v2.6/me/messages", params=params,headers=headers, data=data)


def connect_noitu(sender_id: str):
    from ...Action import sendMessage
    from ...Sundry import Json
    params = {"access_token": token}
    headers = {"Content-Type": "application/json"}
    data = json.dumps({"psid": sender_id, "persistent_menu": [
        {"locale": "default", "composer_input_disabled": False, 
            "call_to_actions": [
                {"type": "postback", "title": "N·ªëi t·ª´ ti·∫øng Anh", 
                                    "payload": "Eng matching"},
                {"type": "postback", "title": "N·ªëi t·ª´ ti·∫øng Vi·ªát", 
                                    "payload": "Vie matching"},
                {"type": "postback", "title": "K·∫øt th√∫c tr√≤ ch∆°i", 
                                    "payload": "offgame"},
                {"type": "postback", "title": "H∆∞·ªõng d·∫´n ch∆°i", 
                                    "payload": "helpplay"},
            ]}]})
    requests.post("https://graph.facebook.com/v17.0/me/custom_user_settings", 
                  params=params, headers=headers, data=data)
    
    sendMessage(sender_id, "K·∫øt n·ªëi tr√≤ ch∆°i th√†nh c√¥ng")
    tool = Json().load("SSApp\SmartStudy/config.json")
    tool["online_noitu"]["Vie"]+=[sender_id]
    Json().save("SSApp\SmartStudy/config.json", tool)
    
    data1 = json.dumps({
        "recipient": {"id": sender_id},
        "messaging_type": "RESPONSE",
        "message":{"text": "B·∫°n c√≥ th·ªÉ ·∫•n b·∫Øt ƒë·∫ßu ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i.", 
            "quick_replies":[
                {"content_type":"text", "title": "B·∫Øt ƒë·∫ßu", 
                    "payload": "start"},
        ]}})
    print(requests.post("https://graph.facebook.com/v17.0/me/messages", 
                    params=params, headers=headers, data=data1))

def offgame(sender_id: str):
    Menus().basic_menu(sender_id)
    
    tool = Json().load("SSApp\SmartStudy/config.json")
    if sender_id in tool["online_noitu"]["Vie"]:
        tool["online_noitu"]["Vie"].remove(sender_id)
    else:
        tool["online_noitu"]["Eng"].remove(sender_id)
    Json().save("SSApp\SmartStudy/config.json", tool)

    sendMessage(sender_id, "B·∫°n ƒë√£ r·ªùi tr√≤ ch∆°i n·ªëi t·ª´ th√†nh c√¥ng.")
    sendMessage(sender_id, "C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆°i v·ªõi t√¥i.")

def button_object_goes_ahead(sender_id: str) -> None:
    params = {"access_token": token}
    headers = {"Content-Type": "application/json"}
    data = json.dumps({
        "recipient":{"id": sender_id},
        "message":{ "attachment": {
            "type":"template", 
            "payload":{
                "template_type":"button",
                "text": "Ch·ªçn ng∆∞·ªùi ƒëi tr∆∞·ªõc",
                "buttons":[
                {"type":"postback", "title": "SSBot",
                    "payload":"bot_start"},
                {"type":"postback", "title": "T√¥i",
                    "payload": "user_start"}
                ]}}}})
    requests.post("https://graph.facebook.com/v2.6/me/messages", 
                    params=params,headers=headers, data=data)


def collect_text(text):
    texts_collect = Json().load("SSApp\SmartStudy/Json/textNoiTu.json")
    texts_collect.append(text)
    Json().save(fileName="Json/textNoiTu.json", data=texts_collect)

